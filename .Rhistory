new_train <- new_train[,-22]
health_train_x <- data.matrix(new_train[ , 1:21])
health_train_y <- as.matrix(new_train[ , 22])
health_lasso <- glmnet(health_train_x, health_train_y, family = "binomial",
alpha = 1)
health_cv_lasso <- cv.glmnet(health_train_x, health_train_y, family = "binomial",
alpha = 1)
## 1-SE ##
lambda_1se <- health_cv_lasso$lambda.1se
health_test_x <- data.matrix(new_test[ , 1:21])
health_test_y <- as.matrix(new_test[ , 23])
table(new_test$HeartDiseaseorAttack, predict(health_lasso, health_test_x,
s = lambda_1se, type = "class"))
46820+15864
62684/125368
46820+50229
97049/125368
12455+50229
62684/125368
class.sum(new_test$HeartDiseaseorAttack, predict(health_lasso, health_test_x,
s = lambda_min, type = "response"))
class.sum(new_test$HeartDiseaseorAttack, predict(health_lasso, health_test_x,
s = lambda_1se, type = "response"))
table(new_test$HeartDiseaseorAttack, predict(health_lasso, health_test_x,
s = lambda_1se, type = "class"))
46820+50229
97049/125368
12455+50229
46820+15864
health_lda <- lda(HeartDiseaseorAttack ~ . , CV = TRUE, data = new_train)
>>>>>>> 6963bc6f7035c29bc997593ea8a4cec063ede61e
# 10 fold CV
health_lda_xval <- rep(0, length = nrow(new_train))
x <- rep(1:10, length = nrow(new_train))
x <- sample(x)
for(i in 1:10){
xtrain <- new_train[x != i, ]
xtest <- new_train[x == i, ]
glub <- lda(HeartDiseaseorAttack ~ . , data = xtrain)
health_lda_xval[x == i] <- predict(glub, xtest)$class
}
table(new_train$HeartDiseaseorAttack, health_lda_xval)
123652+43451
167103/334206
123652+133511
257163/334206
33592+133511
167103/334206
# Using RF variables
health_lda_rf <- lda(HeartDiseaseorAttack ~ . , CV = TRUE, data = rf_best_features)
lasso_best_features <- new_train %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
lasso_test_features <- new_test %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
rf_best_features <- new_train %>% dplyr::select(HeartDiseaseorAttack, Age, GenHlth, ln.BMI, Income, HighBP, Education, HighChol)
rf_test_features <- new_test %>% dplyr::select(HeartDiseaseorAttack, Age, GenHlth, ln.BMI, Income, HighBP, Education, HighChol)
# Using RF variables
health_lda_rf <- lda(HeartDiseaseorAttack ~ . , CV = TRUE, data = rf_best_features)
# 10 fold CV
health_lda_xval <- rep(0, length = nrow(rf_best_features))
x <- rep(1:10, length = nrow(rf_best_features))
x <- sample(x)
for(i in 1:10){
xtrain <- rf_best_features[x != i, ]
xtest <- rf_best_features[x == i, ]
glub <- lda(HeartDiseaseorAttack ~ . , data = xtrain)
health_lda_xval[x == i] <- predict(glub, xtest)$class
}
table(rf_best_features$HeartDiseaseorAttack, health_lda_xval)
35396+131707
118857+48246
# Using LASSO variables
health_lda_lasso <- lda(HeartDiseaseorAttack ~ . , CV = TRUE, data = lasso_best_features)
# 10 fold CV
health_lda_xval <- rep(0, length = nrow(lasso_best_features))
x <- rep(1:10, length = nrow(lasso_best_features))
x <- sample(x)
for(i in 1:10){
xtrain <- lasso_best_features[x != i, ]
xtest <- lasso_best_features[x == i, ]
glub <- lda(HeartDiseaseorAttack ~ . , data = xtrain)
health_lda_xval[x == i] <- predict(glub, xtest)$class
}
table(lasso_best_features$HeartDiseaseorAttack, health_lda_xval)
123655+43448
33490+133613
## UpSample to deal with class imbalance
new_train <- upSample(train[,2:22], as.factor(train[,1]), list=FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
new_train <- new_train[,-22]
health_lda <- lda(HeartDiseaseorAttack ~ . , CV = TRUE, data = new_train)
# LOO CV Confusion Matrix
table(new_train$HeartDiseaseorAttack, health_lda$class)
123595+133201
256796/334206
33902
33902+133201
123595+43508
knitr::opts_chunk$set(echo = TRUE)
results <- data.frame(PCC = c(76.99, 75.23, 77.09, 73.15, 71.40, 72.16, 77.10,
74.73,79.11,75.11,76.10,75.40,77.60),
Specificity = c(NA, NA, NA, NA, NA, NA,
NA, 69.69,74.45,72.77,73.72,70.03,75.43),
Sensitivity = c(79.91,79.07,80.01,88.25,89.99,89.76,79.53,82.00,87.36,
77.76,78.52,78.92,79.90))
rownames(results) <- c("LDA",
"LDA w/RF-Selected Variables",
"LDA w/LASSO-Selected Variables",
"QDA",
"QDA w/RF-Selected Variables",
"QDA w/LASSO-Selected Variables",
"LASSO Logistic Regression",
"RF w/ RF-Selected Variables",
"RF w/ LASSO-Selected Variables",
"GBM Tuned w/ RF-Selected Variables",
"GBM Tuned w/ LASSO-Selected Variables",
"SVM Tuned w/ RF-Selected Variables",
"SVM Tuned w/ LASSO-Selected Variables")
results <- results[order(results$PCC,decreasing=TRUE),]
results.table <- results %>%
kbl(caption = "Prediction Results for Individual Methods") %>%
kable_classic(full_width = FALSE, html_font = "Cambria",
latex_options = "HOLD_position")
results.table
table(new_test$HeartDiseaseorAttack, predict(health_lasso, health_test_x,
s = lambda_1se, type = "class"))
46820+15864
12455+50229
str(new_test)
knitr::opts_chunk$set(echo = FALSE)
library(ada)
library(gbm)
library(caret)
library(e1071)
library(EZtune)
library(caTools)
library(tidyverse)
source('kappa_and_class_sum.R')
library(randomForest)
library(glmnet)
health <- read.csv("heart_disease_health_indicators.csv")
health <- health %>% mutate(
HeartDiseaseorAttack = HeartDiseaseorAttack,
HighBP = as.factor(HighBP),  # LASSO approved
HighChol = as.factor(HighChol),  # LASSO approved
CholCheck = as.factor(CholCheck),
ln.BMI = log(BMI),  # RF approved
Smoker = as.factor(Smoker),  # LASSO approved
Stroke = as.factor(Stroke),  # LASSO 1-SE only, RF approved
Diabetes = as.factor(Diabetes),  # LASSO approved, RF approved
PhysActivity = as.factor(PhysActivity),
Fruits = as.factor(Fruits),
Veggies = as.factor(Veggies),
HvyAlcoholConsump = as.factor(HvyAlcoholConsump),
AnyHealthcare = as.factor(AnyHealthcare),
NoDocbcCost = as.factor(NoDocbcCost),  # LASSO approved
GenHlth = as.factor(GenHlth),  # LASSO approved, RF approved
ln.MentHlth = log(MentHlth + 1), # Probably shouldn't use
bin.MentHlth = as.factor(ifelse(MentHlth == 0, 0, 1)),  #RF approved
fac.MentHlth = as.factor(MentHlth), # Probably shouldn't use
ln.PhysHlth = log(PhysHlth + 1), # Probably shouldn't use
bin.PhysHlth = as.factor(ifelse(PhysHlth == 0, 0, 1)),  # LASSO approved, RF approved
fac.PhysHlth = as.factor(PhysHlth), # Probably shouldn't use
DiffWalk = as.factor(DiffWalk),  # LASSO , RF approved
Sex = as.factor(ifelse(Sex == 0, "F", "M")),  # LASSO approved, RF approved
Age = as.factor(Age),  # LASSO approved, RF approved
Education = as.factor(Education),  # RF approved
Income = as.factor(Income)  # LASSO approved, RF approved
)
# new data with transformed variables
health_subset <- health[c(1:4, 6:15, 18:23, 25, 28)]
# Train and Test Sets
health_tmp <- sample.split(health_subset, SplitRatio = 0.3)
test <- subset(health_subset, health_tmp == TRUE)
train <- subset(health_subset, health_tmp == FALSE)
## Randomly sample rows
train_sample <- sample_n(new_train, 20000)
## UpSample to deal with class imbalance
new_train <- upSample(train[,2:22], as.factor(train[,1]), list=FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
new_train$HeartDiseaseorAttack <- new_train$Class
new_train <- new_train[,-22]
## Test Set Upsample ##
new_test <- upSample(test[,2:22], as.factor(test[,1]), list = FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
# new_test$HeartDiseaseorAttack <- new_test$Class
# new_test <- new_test[,-22]
rf_best_features <- new_train %>% dplyr::select(HeartDiseaseorAttack, Age, GenHlth, ln.BMI, Income, HighBP, Education, HighChol)
rf_test_features <- new_test %>% dplyr::select(HeartDiseaseorAttack, Age, GenHlth, ln.BMI, Income, HighBP, Education, HighChol)
lasso_best_features <- new_train %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
lasso_test_features <- new_test %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
remove(new_train)
## UpSample to deal with class imbalance
new_train <- upSample(train[,2:22], as.factor(train[,1]), list=FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
# new_train$HeartDiseaseorAttack <- new_train$Class
# new_train <- new_train[,-22]
## Test Set Upsample ##
new_test <- upSample(test[,2:22], as.factor(test[,1]), list = FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
# new_test$HeartDiseaseorAttack <- new_test$Class
# new_test <- new_test[,-22]
rf_best_features <- new_train %>% dplyr::select(HeartDiseaseorAttack, Age, GenHlth, ln.BMI, Income, HighBP, Education, HighChol)
rf_test_features <- new_test %>% dplyr::select(HeartDiseaseorAttack, Age, GenHlth, ln.BMI, Income, HighBP, Education, HighChol)
lasso_best_features <- new_train %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
lasso_test_features <- new_test %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
train_sample <- sample_n(best_features, 10000)
train_sample <- sample_n(rf_best_features, 10000)
test_sample <- sample_n(rf_test_features, 10000)
# Random Forest with LASSO selected variables
train_sample.lasso <- sample_n(lasso_test_features, 10000)
test_sample.lasso <- sample_n(lasso_test_features, 10000)
health_train_x <- data.matrix(train_sample[ , 2:22])
health_train_x <- data.matrix(train_sample[ , 2:8])
health_train_y <- as.matrix(train_sample[ , 1])
health_lasso <- glmnet(health_train_x, health_train_y, family = "binomial",
alpha = 1)
health_cv_lasso <- cv.glmnet(health_train_x, health_train_y, family = "binomial",
alpha = 1)
## 1-SE ##
lambda_1se <- health_cv_lasso$lambda.1se
class.sum(new_test$HeartDiseaseorAttack, predict(health_lasso, health_test_x,
s = lambda_1se, type = "response"))
health_test_x <- data.matrix(new_test[ , 2:8])
health_test_y <- as.matrix(new_test[ , 1])
table(new_test$HeartDiseaseorAttack, predict(health_lasso, health_test_x,
s = lambda_1se, type = "class"))
# Using RF variables
health_lda_rf <- lda(HeartDiseaseorAttack ~ . , CV = TRUE, data = train_sample)
# 10 fold CV
health_lda_xval <- rep(0, length = nrow(rf_best_features))
x <- rep(1:10, length = nrow(rf_best_features))
x <- sample(x)
# 10 fold CV
health_lda_xval <- rep(0, length = nrow(train_sample))
x <- rep(1:10, length = nrow(train_sample))
x <- sample(x)
for(i in 1:10){
xtrain <- train_sample[x != i, ]
xtest <- train_sample[x == i, ]
glub <- lda(HeartDiseaseorAttack ~ . , data = xtrain)
health_lda_xval[x == i] <- predict(glub, xtest)$class
}
table(train_sample$HeartDiseaseorAttack, health_lda_xval)
3410+1526
1117+3947
3410+3947
7357/10000
3410+1526
4936/10000
1117+3947
5064/10000
# Using LASSO variables
health_lda_lasso <- lda(HeartDiseaseorAttack ~ . , CV = TRUE, data = test_sample.lasso)
# 10 fold CV
health_lda_xval <- rep(0, length = nrow(test_sample.lasso))
x <- rep(1:10, length = nrow(test_sample.lasso))
x <- sample(x)
for(i in 1:10){
xtrain <- test_sample.lasso[x != i, ]
xtest <- test_sample.lasso[x == i, ]
glub <- lda(HeartDiseaseorAttack ~ . , data = xtrain)
health_lda_xval[x == i] <- predict(glub, xtest)$class
}
table(test_sample.lasso$HeartDiseaseorAttack, health_lda_xval)
3831+3850
3831+1302
1017+3850
# Using RF variables
health_qda_rf <- qda(HeartDiseaseorAttack ~ . , CV = TRUE, data = train_sample)
# Using LASSO variables
health_qda_lasso <- qda(HeartDiseaseorAttack ~ . , CV = TRUE, data = train_sample.lasso)
# 10 fold CV
health_qda_xval_class <- rep(0, nrow(train_sample.lasso))
health_qda_xval_posterior <- rep(0, nrow(train_sample.lasso))
xvs <- rep(1:10, length = nrow(train_sample.lasso))
xvs <- sample(xvs)
for(i in 1:10){
xtrain <- train_sample.lasso[xvs != i, ]
xtest <- train_sample.lasso[xvs == i, ]
glub <- qda(HeartDiseaseorAttack ~ . , data = xtrain)
health_qda_xval_posterior[xvs == i] <- predict(glub, xtest)$posterior[, 2]
health_qda_xval_class[xvs == i] <- predict(glub, xtest)$class
}
table(train_sample.lasso$HeartDiseaseorAttack, health_qda_xval_class)
2678+4416
2678+2410
496+4416
table(train_sample$HeartDiseaseorAttack, health_lda_xval)
2399+2537
2399/4936
2449+2615
2449/5064
table(test_sample.lasso$HeartDiseaseorAttack, health_lda_xval)
3831+1302
3831/5133
1017+3850
1017/4867
table(train_sample.lasso$HeartDiseaseorAttack, health_qda_xval_class)
2678+2410
2678/5088
496+4416
496/4912
2678+4416
rf_train_x <- data.matrix(train_sample[ , 2:8])
rf_train_y <- as.matrix(train_sample[ , 1])
rf_lasso <- glmnet(rf_train_x, rf_train_y, family = "binomial",
alpha = 1)
table(train-sample$HeartDiseaseorAttack, predict(rf_lasso, rf_train_x,
type = "class"))
rf_cv_lasso <- cv.glmnet(rf_train_x, rf_train_y, family = "binomial",
alpha = 1)
rf_lambda_1se <- rf_cv_lasso$lambda.1se
table(train-sample$HeartDiseaseorAttack, predict(rf_lasso, rf_train_x,
s = rf_lambda_1se, type = "class"))
table(train_sample$HeartDiseaseorAttack, predict(rf_lasso, rf_train_x,
s = rf_lambda_1se, type = "class"))
3446+3945
3446+1490
3446/4936
1119+3945
1119/5064
las_train_x <- data.matrix(train_sample.lasso[ , 2:15])
las_train_y <- as.matrix(train_sample.lasso[ , 1])
las_lasso <- glmnet(las_train_x, las_train_y, family = "binomial",
alpha = 1)
las_cv_lasso <- cv.glmnet(las_train_x, las_train_y, family = "binomial",
alpha = 1)
las_lambda_1se <- las_cv_lasso$lambda.1se
table(train_sample.lasso$HeartDiseaseorAttack, predict(las_lasso, las_train_x,
s = las_lambda_1se, type = "class"))
3805+3863
3805+1283
3805/1283
3805/5088
1049+3863
1049/4912
results <- data.frame(PCC = c(73.57, 76.81, NA, 70.94, 73.91, 76.68,
74.73,79.11,75.11,76.10,75.40,77.60),
Specificity = c(48.60, 74.63, NA, 52.63, 69.81,
74.78, 69.69,74.45,72.77,73.72,70.03,75.43),
Sensitivity = c(48.36,20.90,NA,10.10,22.10,21.36,82.00,87.36,
77.76,78.52,78.92,79.90))
rownames(results) <- c("LDA w/RF-Selected Variables",
"LDA w/LASSO-Selected Variables",
"QDA w/RF-Selected Variables",
"QDA w/LASSO-Selected Variables",
"LASSO Logistic Regression w/LASSO-Selected Variables",
"LASSO Logistic Regression w/RF-Selected Variables",
"RF w/ RF-Selected Variables",
"RF w/ LASSO-Selected Variables",
"GBM Tuned w/ RF-Selected Variables",
"GBM Tuned w/ LASSO-Selected Variables",
"SVM Tuned w/ RF-Selected Variables",
"SVM Tuned w/ LASSO-Selected Variables")
results <- results[order(results$PCC,decreasing=TRUE),]
results.table <- results %>%
kbl(caption = "Prediction Results for Individual Methods") %>%
kable_classic(full_width = FALSE, html_font = "Cambria",
latex_options = "HOLD_position")
<<<<<<< HEAD
results <- data.frame(PCC = c(76.99, 75.23, 77.09, 73.15, 71.40, 72.16, 77.10),
Specificity = c(79.91, 79.07, 80.01, 88.25, 89.99, 89.76,
79.53))
rownames(results) <- c("LDA", "LDA w/RF-Selected Variables",
"LDA w/LASSO-Selected Variables", "QDA", "QDA w/RF-Selected Variables",
"QDA w/LASSO-Selected Variables", "LASSO Logistic Regression")
results %>%
kbl(caption = "Prediction Results for Individual Methods") %>%
kable_classic(full_width = FALSE, html_font = "Cambria",
latex_options = "HOLD_position")
library(tidyverse)
library(dplyr)
library(MASS)
library(verification)
library(caTools)
library(klaR)
library(randomForest)
library(glmnet)
library(ggplot2)
library(knitr)
library(gridExtra)
library(kableExtra)
results <- data.frame(PCC = c(76.99, 75.23, 77.09, 73.15, 71.40, 72.16, 77.10),
Specificity = c(79.91, 79.07, 80.01, 88.25, 89.99, 89.76,
79.53))
rownames(results) <- c("LDA", "LDA w/RF-Selected Variables",
"LDA w/LASSO-Selected Variables", "QDA", "QDA w/RF-Selected Variables",
"QDA w/LASSO-Selected Variables", "LASSO Logistic Regression")
results %>%
kbl(caption = "Prediction Results for Individual Methods") %>%
kable_classic(full_width = FALSE, html_font = "Cambria",
latex_options = "HOLD_position")
class.sum(train_sample$HeartDiseaseorAttack, predict(rf, type="prob")[,2], cap = "Training Data RF Performance")
class.sum(test_sample$HeartDiseaseorAttack, predict(rf, test_sample, type="prob")[,2], cap = "Test Data RF Performance")
results <- data.frame(PCC = c(76.99, 75.23, 77.09, 73.15, 71.40, 72.16, 77.10,74.73),
Specificity = c(79.91, 79.07, 80.01, 88.25, 89.99, 89.76,
79.53, 69.69))
rownames(results) <- c("LDA", "LDA w/RF-Selected Variables",
"LDA w/LASSO-Selected Variables", "QDA", "QDA w/RF-Selected Variables",
"QDA w/LASSO-Selected Variables", "LASSO Logistic Regression", "Random Forest w/ RF-Selected Variables")
results.table <- results %>%
kbl(caption = "Prediction Results for Individual Methods") %>%
kable_classic(full_width = FALSE, html_font = "Cambria",
latex_options = "HOLD_position")
results.table
# Random Forest with LASSO selected variables
train_sample.lasso <- sample_n(lasso_test_features, 10000)
health <- read.csv("heart_disease_health_indicators.csv")
health <- health %>% mutate(
HeartDiseaseorAttack = HeartDiseaseorAttack,
HighBP = as.factor(HighBP),  # LASSO approved
HighChol = as.factor(HighChol),  # LASSO approved
CholCheck = as.factor(CholCheck),
ln.BMI = log(BMI),  # RF approved
Smoker = as.factor(Smoker),  # LASSO approved
Stroke = as.factor(Stroke),  # LASSO 1-SE only, RF approved
Diabetes = as.factor(Diabetes),  # LASSO approved, RF approved
PhysActivity = as.factor(PhysActivity),
Fruits = as.factor(Fruits),
Veggies = as.factor(Veggies),
HvyAlcoholConsump = as.factor(HvyAlcoholConsump),
AnyHealthcare = as.factor(AnyHealthcare),
NoDocbcCost = as.factor(NoDocbcCost),  # LASSO approved
GenHlth = as.factor(GenHlth),  # LASSO approved, RF approved
ln.MentHlth = log(MentHlth + 1), # Probably shouldn't use
bin.MentHlth = as.factor(ifelse(MentHlth == 0, 0, 1)),  #RF approved
fac.MentHlth = as.factor(MentHlth), # Probably shouldn't use
ln.PhysHlth = log(PhysHlth + 1), # Probably shouldn't use
bin.PhysHlth = as.factor(ifelse(PhysHlth == 0, 0, 1)),  # LASSO approved, RF approved
fac.PhysHlth = as.factor(PhysHlth), # Probably shouldn't use
DiffWalk = as.factor(DiffWalk),  # LASSO , RF approved
Sex = as.factor(ifelse(Sex == 0, "F", "M")),  # LASSO approved, RF approved
Age = as.factor(Age),  # LASSO approved, RF approved
Education = as.factor(Education),  # RF approved
Income = as.factor(Income)  # LASSO approved, RF approved
)
# new data with transformed variables
health_subset <- health[c(1:4, 6:15, 18:23, 25, 28)]
# Train and Test Sets
health_tmp <- sample.split(health_subset, SplitRatio = 0.3)
test <- subset(health_subset, health_tmp == TRUE)
train <- subset(health_subset, health_tmp == FALSE)
## Randomly sample rows
train_sample <- sample_n(train, 5000)
## UpSample to deal with class imbalance
new_train <- upSample(train[,2:22], as.factor(train[,1]), list=FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
library(caret)
## UpSample to deal with class imbalance
new_train <- upSample(train[,2:22], as.factor(train[,1]), list=FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
## Test Set Upsample ##
new_test <- upSample(test[,2:22], as.factor(test[,1]), list = FALSE) %>%
mutate(HeartDiseaseorAttack = as.numeric(Class)-1)
lasso_best_features <- new_train %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
lasso_test_features <- new_test %>% dplyr::select(HeartDiseaseorAttack, HighBP,
HighChol, CholCheck, Smoker,
Stroke, Diabetes, HvyAlcoholConsump,
NoDocbcCost, GenHlth, DiffWalk,
Sex, Age, Income, bin.PhysHlth)
# Random Forest with LASSO selected variables
train_sample.lasso <- sample_n(lasso_test_features, 10000)
test_sample.lasso <- sample_n(lasso_test_features, 10000)
rf.lasso <- randomForest(as.factor(HeartDiseaseorAttack) ~ ., data = train_sample.lasso, n.trees = 100)
class.sum(train_sample.lasso$HeartDiseaseorAttack, predict(rf.lasso, type="prob")[,2], cap = "Training Data RF Performance")
class.sum(test_sample.lasso$HeartDiseaseorAttack, predict(rf.lasso, test_sample.lasso, type="prob")[,2], cap = "Test Data RF Performance")
results <- data.frame(PCC = c(76.99, 75.23, 77.09, 73.15, 71.40, 72.16, 77.10,74.73,79.11),
Specificity = c(79.91, 79.07, 80.01, 88.25, 89.99, 89.76,
79.53, 69.69,74.45))
rownames(results) <- c("LDA", "LDA w/RF-Selected Variables",
"LDA w/LASSO-Selected Variables", "QDA", "QDA w/RF-Selected Variables",
"QDA w/LASSO-Selected Variables", "LASSO Logistic Regression", "RF w/ RF-Selected Variables", "RF w/ LASSO-Selected Variables")
results.table <- results %>%
kbl(caption = "Prediction Results for Individual Methods") %>%
kable_classic(full_width = FALSE, html_font = "Cambria",
latex_options = "HOLD_position")
results.table
pnorm(350,400,sqrt(1200))
pnorm(350,250,sqrt(375),lower.tail = FALSE)
=======
results.table
# Using RF variables
health_qda_rf <- qda(HeartDiseaseorAttack ~ . , CV = TRUE, data = train_sample)
findLinearCombos(train_sample)
>>>>>>> 6963bc6f7035c29bc997593ea8a4cec063ede61e
